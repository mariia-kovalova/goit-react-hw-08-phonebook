{"version":3,"file":"static/js/834.e7c331e1.chunk.js","mappings":"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","sources":["utils/capitalize.js","components/FormField/FormField.jsx","components/Section/Section.jsx","utils/getDefaultValues.js","components/ContactItem/ContactItem.jsx","components/InfoText/InfoText.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/AddContactButton/AddContactButton.jsx","components/ModalWindow/ModalWindow.jsx","components/ContactForm/inputValidation.js","components/ContactForm/inputsList.js","components/ContactForm/ContactForm.jsx","views/ContactsView.jsx"],"sourcesContent":["export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import PropTypes from 'prop-types';\nimport { capitalize } from 'utils/capitalize';\nimport {\n  FormControl,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n} from '@mui/material';\nimport { useState } from 'react';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\n\nexport const FormField = ({\n  inputName,\n  type,\n  id,\n  register,\n  isError,\n  getErrorMassage,\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return (\n    <FormControl error={isError(inputName)}>\n      <InputLabel htmlFor={id}>{capitalize(inputName)}</InputLabel>\n      {type !== 'password' ? (\n        <OutlinedInput\n          id={id}\n          type={type}\n          label={capitalize(inputName)}\n          aria-describedby={id}\n          {...register(inputName)}\n        />\n      ) : (\n        <OutlinedInput\n          id={id}\n          type={showPassword ? 'text' : 'password'}\n          label={capitalize(inputName)}\n          aria-describedby={id}\n          {...register(inputName)}\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton\n                aria-label=\"toggle password visibility\"\n                onClick={handleClickShowPassword}\n                onMouseDown={handleMouseDownPassword}\n                edge=\"end\"\n              >\n                {showPassword ? <Visibility /> : <VisibilityOff />}\n              </IconButton>\n            </InputAdornment>\n          }\n        />\n      )}\n      {isError(inputName) && (\n        <FormHelperText id={id}>{getErrorMassage(inputName)}</FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\nFormField.propTypes = {\n  inputName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired,\n  isError: PropTypes.func.isRequired,\n  getErrorMassage: PropTypes.func.isRequired,\n};\n","import { Box, Container, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Box component=\"section\" sx={{ paddingTop: '20px', paddingBottom: '20px' }}>\n      <Container>\n        {title && (\n          <Typography component=\"h2\" variant=\"h2\">\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n","export const getDefaultValues = arr =>\n  arr.reduce(\n    (acc, item) => ({\n      ...acc,\n      [item.inputName]: '',\n    }),\n    {}\n  );\n","import { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport PropTypes from 'prop-types';\n\nimport { Avatar, Box, IconButton, Typography } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactItem = memo(function ContactItem({ contact }) {\n  const { id, name, number, avatar } = contact;\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Box\n      component=\"li\"\n      sx={{\n        padding: '10px',\n        bgcolor: 'primary.50',\n        borderRadius: '4px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Box sx={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\n        <Avatar alt={avatar.alt} src={avatar.src} />\n        <Box>\n          <Typography>{name}</Typography>\n          <Typography>{number}</Typography>\n        </Box>\n      </Box>\n      <IconButton aria-label=\"delete\" onClick={handleDelete}>\n        <DeleteIcon />\n      </IconButton>\n    </Box>\n  );\n});\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nexport const InfoText = ({ children, color }) => {\n  return (\n    <Typography\n      component=\"p\"\n      sx={{ color, textAlign: 'center', padding: '30px' }}\n    >\n      {children}\n    </Typography>\n  );\n};\n\nInfoText.propTypes = {\n  children: PropTypes.any,\n  color: PropTypes.string,\n};\n","import { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useContacts } from 'hooks';\nimport { selectFilter } from 'redux/filter/selectors';\n\nimport { ContactItem } from 'components/ContactItem';\nimport { Loader } from 'components/Loader';\nimport { InfoText } from 'components/InfoText';\nimport { List } from '@mui/material';\n\nexport const ContactList = () => {\n  const { isLoading, error, contacts } = useContacts();\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isOk = !isLoading && !error;\n  const showError = !isLoading && error;\n  const empty = isOk && filter === '' && contacts.length === 0;\n  const noMatches = isOk && filter !== '' && contacts.length === 0;\n  const showList = !error && contacts.length !== 0;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {showError && <InfoText>Sorry, something went wrong</InfoText>}\n      {empty && <InfoText>Your contacts list is empty</InfoText>}\n      {noMatches && <InfoText>Sorry, there is no such contacts</InfoText>}\n      {showList && (\n        <List\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '10px',\n          }}\n        >\n          {contacts.map(contact => (\n            <ContactItem key={contact.id} contact={contact} />\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\nimport { nanoid } from 'nanoid';\nimport { Box, FormControl, InputLabel, OutlinedInput } from '@mui/material';\n\nconst filterId = nanoid();\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => dispatch(setFilter(e.currentTarget.value.trim()));\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <FormControl sx={{ width: '350px' }}>\n        <InputLabel htmlFor={filterId}>Search</InputLabel>\n        <OutlinedInput\n          id={filterId}\n          type=\"text\"\n          label=\"Search\"\n          onChange={handleChange}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n","import { IconButton } from '@mui/material';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport PropTypes from 'prop-types';\n\nexport const AddContactButton = ({ onOpenModal }) => (\n  <IconButton\n    variant=\"contained\"\n    sx={{\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: '14px',\n      bgcolor: 'primary.400',\n      color: 'common.white',\n      position: 'fixed',\n      top: '80%',\n      left: '90%',\n      '&:hover': {\n        bgcolor: 'primary.300',\n      },\n    }}\n    type=\"button\"\n    onClick={onOpenModal}\n  >\n    <PersonAddIcon />\n  </IconButton>\n);\n\nAddContactButton.propTypes = {\n  onOpenModal: PropTypes.func.isRequired,\n};\n","import { Box, Modal } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nexport const ModalWindow = ({ children, onModalClose }) => {\n  return (\n    <Modal\n      open={true}\n      onClose={onModalClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box\n        sx={{\n          display: 'inline-flex',\n          bgcolor: 'common.white',\n          padding: '20px',\n          borderRadius: '3px',\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n        }}\n      >\n        {children}\n      </Box>\n    </Modal>\n  );\n};\n\nModalWindow.propTypes = {\n  children: PropTypes.element,\n  onModalClose: PropTypes.func.isRequired,\n};\n","import * as Yup from 'yup';\n\nconst nameRegExp = new RegExp(\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n);\n\nconst numberRegExp =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nexport const SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      nameRegExp,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: Yup.string()\n    .matches(\n      numberRegExp,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n","import { nanoid } from 'nanoid';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport const inputsList = [\n  {\n    inputName: 'name',\n    type: 'text',\n    id: nameInputId,\n  },\n  {\n    inputName: 'number',\n    type: 'tel',\n    id: numberInputId,\n  },\n];\n","import { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { useContacts } from 'hooks';\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { SignupSchema } from './inputValidation';\nimport { getDefaultValues } from 'utils/getDefaultValues';\n\nimport { Box, Button } from '@mui/material';\nimport { FormField } from 'components/FormField';\nimport { inputsList } from './inputsList';\n\nimport PropTypes from 'prop-types';\n\nconst defaultValues = getDefaultValues(inputsList);\n\nexport const ContactForm = ({ onModalClose }) => {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    reset,\n  } = useForm({\n    resolver: yupResolver(SignupSchema),\n    defaultValues,\n  });\n  const { contacts } = useContacts();\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    const isInContacts = contacts.find(contact => contact.name === data.name);\n    if (isInContacts) return alert(`${data.name} is aready in contacts.`);\n    dispatch(addContact(data));\n    reset();\n    onModalClose();\n  };\n\n  const isError = inputName => {\n    if (errors[inputName]) return true;\n    return false;\n  };\n\n  const getErrorMassage = inputName => errors[inputName].message;\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '20px',\n        width: '400px',\n        margin: '0 auto',\n      }}\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      {inputsList.map(({ inputName, type, id }) => (\n        <FormField\n          key={id}\n          inputName={inputName}\n          type={type}\n          id={id}\n          register={register}\n          isError={isError}\n          getErrorMassage={getErrorMassage}\n        />\n      ))}\n      <Box sx={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>\n        <Button type=\"submit\" variant=\"contained\">\n          Add Contact\n        </Button>\n        <Button type=\"button\" variant=\"outlined\" onClick={() => onModalClose()}>\n          Cancel\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nContactForm.propTypes = {\n  onModalClose: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\n\nimport { Section } from 'components/Section';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { AddContactButton } from 'components/AddContactButton';\nimport { ModalWindow } from 'components/ModalWindow';\nimport { ContactForm } from 'components/ContactForm';\n\nconst ContactsView = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal(!showModal);\n\n  return (\n    <>\n      <Section>\n        <Filter />\n      </Section>\n      <Section>\n        <ContactList />\n        <AddContactButton onOpenModal={toggleModal} />\n      </Section>\n      {showModal && (\n        <ModalWindow onModalClose={toggleModal}>\n          <ContactForm onModalClose={toggleModal} />\n        </ModalWindow>\n      )}\n    </>\n  );\n};\n\nexport default ContactsView;\n"],"names":["capitalize","string","charAt","toUpperCase","slice","FormField","inputName","type","id","register","isError","getErrorMassage","useState","showPassword","setShowPassword","FormControl","error","InputLabel","htmlFor","OutlinedInput","label","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","event","preventDefault","edge","Visibility","VisibilityOff","FormHelperText","Section","title","children","Box","component","sx","paddingTop","paddingBottom","Container","Typography","variant","getDefaultValues","arr","reduce","acc","item","ContactItem","memo","contact","name","number","avatar","dispatch","useDispatch","padding","bgcolor","borderRadius","display","alignItems","justifyContent","gap","Avatar","alt","src","deleteContact","Delete","InfoText","color","textAlign","ContactList","useContacts","isLoading","contacts","filter","useSelector","selectFilter","useEffect","fetchContacts","isOk","showError","empty","length","noMatches","showList","Loader","List","flexDirection","map","filterId","nanoid","Filter","width","onChange","e","setFilter","currentTarget","value","trim","AddContactButton","onOpenModal","top","left","PersonAdd","ModalWindow","onModalClose","Modal","open","onClose","transform","nameRegExp","RegExp","SignupSchema","Yup","shape","matches","required","inputsList","defaultValues","ContactForm","useForm","resolver","yupResolver","errors","formState","handleSubmit","reset","message","margin","onSubmit","data","find","alert","addContact","Button","showModal","setShowModal","toggleModal"],"sourceRoot":""}
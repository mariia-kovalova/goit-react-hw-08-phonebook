{"version":3,"file":"static/js/952.4e8cade4.chunk.js","mappings":"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","sources":["utils/capitalize.js","components/FormField/FormFieldStyles.js","components/FormField/FormField.jsx","components/Section/SectionStyles.js","components/Section/Section.jsx","utils/getDefaultValues.js","components/ModalWindow/ModalWindowStyles.js","components/ModalWindow/ModalWindow.jsx","components/UpdateContactForm/consts/inputValidation.js","components/BasicSnackbar/BasicSnackbar.jsx","components/UpdateContactForm/consts/inputsList.js","components/UpdateContactForm/UpdateContactFormStyles.js","components/UpdateContactForm/UpdateContactForm.jsx","components/ContactItem/ContactItemStyles.js","components/ContactItem/ContactItem.jsx","components/InfoText/InfoTextStyles.js","components/InfoText/InfoText.jsx","components/ContactList/ContactListStyles.js","components/ContactList/ContactList.jsx","components/Filter/FilterStyles.js","components/Filter/Filter.jsx","components/AddContactButton/AddContactButtonStyles.js","components/AddContactButton/AddContactButton.jsx","components/AddContactForm/consts/inputValidation.js","components/AddContactForm/consts/inputsList.js","components/AddContactForm/AddContactFormStyles.js","components/AddContactForm/AddContactForm.jsx","views/ContactsView.jsx"],"sourcesContent":["export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","export const styles = {\n  error: { color: 'error.main', fontSize: '12px' },\n};\n","import PropTypes from 'prop-types';\nimport { capitalize } from 'utils/capitalize';\nimport {\n  FormControl,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  Typography,\n} from '@mui/material';\nimport { useState } from 'react';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { styles } from './FormFieldStyles';\n\nexport const FormField = ({ inputName, type, id, register, errors }) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const isError = inputName => {\n    if (errors[inputName]) return true;\n    return false;\n  };\n\n  return (\n    <>\n      <FormControl error={isError(inputName)}>\n        <InputLabel htmlFor={id}>{capitalize(inputName)}</InputLabel>\n        {type !== 'password' ? (\n          <OutlinedInput\n            id={id}\n            type={type}\n            label={capitalize(inputName)}\n            aria-describedby={id}\n            {...register(inputName, { required: 'This field is required.' })}\n          />\n        ) : (\n          <OutlinedInput\n            id={id}\n            type={showPassword ? 'text' : 'password'}\n            label={capitalize(inputName)}\n            aria-describedby={id}\n            {...register(inputName, { required: 'This field is required.' })}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n        )}\n        <FormHelperText\n          component={ErrorMessage}\n          id={id}\n          errors={errors}\n          name={inputName}\n          render={({ message }) => (\n            <Typography sx={styles.error}>{message}</Typography>\n          )}\n        />\n      </FormControl>\n    </>\n  );\n};\n\nFormField.propTypes = {\n  inputName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired,\n};\n","export const styles = {\n  section: { paddingTop: '20px', paddingBottom: '20px' },\n  title: { textAlign: 'center' },\n};\n","import { Box, Container, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { styles } from './SectionStyles';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Box component=\"section\" sx={styles.section}>\n      <Container>\n        {title && (\n          <Typography component=\"h2\" variant=\"h2\" sx={styles.title}>\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n","export const getDefaultValues = arr =>\n  arr.reduce(\n    (acc, item) => ({\n      ...acc,\n      [item.inputName]: '',\n    }),\n    {}\n  );\n","export const styles = {\n  wrap: {\n    display: 'inline-flex',\n    bgcolor: 'common.white',\n    padding: '20px',\n    borderRadius: '3px',\n    position: 'absolute',\n    top: { xs: '35%', sm: '50%' },\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n","import { Box, Modal } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { styles } from './ModalWindowStyles';\n\nexport const ModalWindow = ({ children, onModalClose }) => {\n  return (\n    <Modal\n      open\n      onClose={onModalClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={styles.wrap}>{children}</Box>\n    </Modal>\n  );\n};\n\nModalWindow.propTypes = {\n  children: PropTypes.element,\n  onModalClose: PropTypes.func.isRequired,\n};\n","import * as Yup from 'yup';\n\nconst nameRegExp = new RegExp(\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n);\n\nconst numberRegExp =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nexport const SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('This field is required')\n    .matches(\n      nameRegExp,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .required('This field is required')\n    .matches(\n      numberRegExp,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n","import { Alert, Snackbar } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\nconst popUpRoot = document.querySelector('#pop-up-root');\n\nexport const BasicSnackbar = ({ onClose, severity, variant, children }) => {\n  return createPortal(\n    <Snackbar\n      open\n      autoHideDuration={4000}\n      onClose={onClose}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n    >\n      <Alert onClose={onClose} severity={severity} variant={variant}>\n        {children}\n      </Alert>\n    </Snackbar>,\n    popUpRoot\n  );\n};\n\nBasicSnackbar.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  severity: PropTypes.string.isRequired,\n  variant: PropTypes.string.isRequired,\n  children: PropTypes.any.isRequired,\n};\n","import { nanoid } from 'nanoid';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport const inputsList = [\n  {\n    inputName: 'name',\n    type: 'text',\n    id: nameInputId,\n  },\n  {\n    inputName: 'number',\n    type: 'tel',\n    id: numberInputId,\n  },\n];\n","export const styles = {\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '20px',\n    width: { xs: '330px', sm: '400px' },\n    margin: '0 auto',\n  },\n  btnList: { display: 'flex', justifyContent: 'center', gap: '20px' },\n};\n","import { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { useContacts } from 'hooks';\nimport { updateContact } from 'redux/contacts/operations';\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { SignupSchema } from './consts/inputValidation';\n\nimport { Box, Button } from '@mui/material';\nimport { BasicSnackbar } from 'components/BasicSnackbar';\nimport { FormField } from 'components/FormField';\nimport { inputsList } from './consts/inputsList';\n\nimport PropTypes from 'prop-types';\nimport { styles } from './UpdateContactFormStyles';\n\nexport const UpdateContactForm = ({ id, onModalClose, onUpdate }) => {\n  const [contactName, setContactName] = useState(null);\n  const { contacts } = useContacts();\n  const { name, number } = contacts.find(item => item.id === id);\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    reset,\n  } = useForm({\n    resolver: yupResolver(SignupSchema),\n    defaultValues: {\n      name,\n      number,\n    },\n  });\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    const isChanged = data.name === name && data.number === number;\n    if (isChanged) return onModalClose();\n    const contactInfo = contacts.find(({ name }) => name === data.name);\n    if (contactInfo) return setContactName(contactInfo.name);\n    dispatch(updateContact({ id, ...data }));\n    onUpdate();\n    reset();\n    onModalClose();\n  };\n\n  return (\n    <>\n      <Box component=\"form\" sx={styles.form} onSubmit={handleSubmit(onSubmit)}>\n        {inputsList.map(({ inputName, type, id }) => (\n          <FormField\n            key={id}\n            inputName={inputName}\n            type={type}\n            id={id}\n            register={register}\n            errors={errors}\n          />\n        ))}\n        <Box sx={styles.btnList}>\n          <Button type=\"submit\" variant=\"contained\">\n            Update Contact\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outlined\"\n            onClick={() => onModalClose()}\n          >\n            Cancel\n          </Button>\n        </Box>\n      </Box>\n      {contactName && (\n        <BasicSnackbar\n          onClose={() => setContactName(null)}\n          severity=\"warning\"\n          variant=\"filled\"\n        >\n          {contactName} is aready in contacts.\n        </BasicSnackbar>\n      )}\n    </>\n  );\n};\n\nUpdateContactForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  onModalClose: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n};\n","export const styles = {\n  item: {\n    padding: '10px',\n    bgcolor: 'primary.50',\n    borderRadius: '4px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  itemContentWrap: { display: 'flex', gap: '10px', alignItems: 'center' },\n  btnList: { display: 'flex', gap: '5px', alignItems: 'center' },\n};\n","import { memo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport PropTypes from 'prop-types';\n\nimport { Avatar, Box, IconButton, Tooltip, Typography } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { ModalWindow } from 'components/ModalWindow';\nimport { UpdateContactForm } from 'components/UpdateContactForm';\nimport { styles } from './ContactItemStyles';\nimport { BasicSnackbar } from 'components/BasicSnackbar';\n\nexport const ContactItem = memo(function ContactItem({ contact }) {\n  const [showModal, setShowModal] = useState(false);\n  const [updateSuccess, setUpdatedSuccess] = useState(false);\n  const { id, name, number, avatar } = contact;\n  const dispatch = useDispatch();\n\n  const handleToggleModal = () => setShowModal(!showModal);\n  const handleDelete = () => dispatch(deleteContact(id));\n  const handleUpdate = () => setUpdatedSuccess(true);\n\n  return (\n    <>\n      <Box component=\"li\" sx={styles.item}>\n        <Box sx={styles.itemContentWrap}>\n          <Avatar alt={avatar.alt} src={avatar.src} />\n          <Box>\n            <Typography>{name}</Typography>\n            <Typography>{number}</Typography>\n          </Box>\n        </Box>\n        <Box component=\"ul\" sx={styles.btnList}>\n          <Tooltip title=\"Update contact\">\n            <IconButton aria-label=\"update\" onClick={handleToggleModal}>\n              <EditIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Dlete contact\">\n            <IconButton aria-label=\"delete\" onClick={handleDelete}>\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n      {showModal && (\n        <ModalWindow onModalClose={handleToggleModal}>\n          <UpdateContactForm\n            id={id}\n            onModalClose={handleToggleModal}\n            onUpdate={handleUpdate}\n          />\n        </ModalWindow>\n      )}\n      {updateSuccess && (\n        <BasicSnackbar\n          onClose={() => setUpdatedSuccess(false)}\n          severity=\"success\"\n          variant=\"filled\"\n        >\n          The contact was successfully updated\n        </BasicSnackbar>\n      )}\n    </>\n  );\n});\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","export const styles = {\n  text: { textAlign: 'center', padding: '30px' },\n};\n","import { Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { styles } from './InfoTextStyles';\n\nexport const InfoText = ({ children, color = 'common.black' }) => {\n  return (\n    <Typography component=\"p\" sx={{ ...styles.text, color }}>\n      {children}\n    </Typography>\n  );\n};\n\nInfoText.propTypes = {\n  children: PropTypes.any,\n  color: PropTypes.string,\n};\n","export const styles = {\n  list: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '10px',\n  },\n};\n","import { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useContacts } from 'hooks';\nimport { selectFilter } from 'redux/filter/selectors';\n\nimport { ContactItem } from 'components/ContactItem';\nimport { Loader } from 'components/Loader';\nimport { InfoText } from 'components/InfoText';\nimport { List } from '@mui/material';\nimport { styles } from './ContactListStyles';\n\nexport const ContactList = () => {\n  const { isLoading, error, contacts } = useContacts();\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isOk = !isLoading && !error;\n  const showError = !isLoading && error;\n  const empty = isOk && filter === '' && contacts.length === 0;\n  const noMatches = isOk && filter !== '' && contacts.length === 0;\n  const showList = !error && contacts.length !== 0;\n\n  return (\n    <>\n      {showList && (\n        <List sx={styles.list}>\n          {contacts.map(contact => (\n            <ContactItem key={contact.id} contact={contact} />\n          ))}\n        </List>\n      )}\n      {isLoading && <Loader />}\n      {showError && <InfoText>Sorry, something went wrong</InfoText>}\n      {empty && <InfoText>Your contacts list is empty</InfoText>}\n      {noMatches && <InfoText>Sorry, there is no such contacts</InfoText>}\n    </>\n  );\n};\n","export const styles = {\n  wrap: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\nimport { nanoid } from 'nanoid';\nimport { Box, FormControl, InputLabel, OutlinedInput } from '@mui/material';\nimport { styles } from './FilterStyles';\n\nconst filterId = nanoid();\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => dispatch(setFilter(e.currentTarget.value.trim()));\n\n  return (\n    <Box sx={styles.wrap}>\n      <FormControl sx={{ width: '350px' }}>\n        <InputLabel htmlFor={filterId}>Search</InputLabel>\n        <OutlinedInput\n          id={filterId}\n          type=\"text\"\n          label=\"Search\"\n          onChange={handleChange}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n","export const styles = {\n  btn: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '14px',\n    bgcolor: 'primary.400',\n    color: 'common.white',\n    position: 'fixed',\n    top: '87%',\n    left: { xs: '80%', sm: '90%' },\n    '&:hover': {\n      bgcolor: 'primary.300',\n    },\n  },\n};\n","import { IconButton, Tooltip } from '@mui/material';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport PropTypes from 'prop-types';\nimport { styles } from './AddContactButtonStyles';\n\nexport const AddContactButton = ({ onOpenModal }) => (\n  <Tooltip title=\"Add contact\">\n    <IconButton\n      variant=\"contained\"\n      sx={styles.btn}\n      type=\"button\"\n      onClick={onOpenModal}\n    >\n      <PersonAddIcon />\n    </IconButton>\n  </Tooltip>\n);\n\nAddContactButton.propTypes = {\n  onOpenModal: PropTypes.func.isRequired,\n};\n","import * as Yup from 'yup';\n\nconst nameRegExp = new RegExp(\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n);\n\nconst numberRegExp =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nexport const Schema = Yup.object().shape({\n  name: Yup.string()\n    .required('This field is required')\n    .matches(\n      nameRegExp,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .required('This field is required')\n    .matches(\n      numberRegExp,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n","import { nanoid } from 'nanoid';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport const inputsList = [\n  {\n    inputName: 'name',\n    type: 'text',\n    id: nameInputId,\n  },\n  {\n    inputName: 'number',\n    type: 'tel',\n    id: numberInputId,\n  },\n];\n","export const styles = {\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '20px',\n    width: { xs: '330px', sm: '400px' },\n    margin: '0 auto',\n  },\n};\n","import { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { useContacts } from 'hooks';\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Schema } from './consts/inputValidation';\nimport { getDefaultValues } from 'utils/getDefaultValues';\n\nimport { Box, Button } from '@mui/material';\nimport { BasicSnackbar } from 'components/BasicSnackbar';\nimport { FormField } from 'components/FormField';\nimport { inputsList } from './consts/inputsList';\n\nimport PropTypes from 'prop-types';\nimport { styles } from './AddContactFormStyles';\n\nconst defaultValues = getDefaultValues(inputsList);\n\nexport const AddContactForm = ({ onModalClose }) => {\n  const [contactName, setContactName] = useState(null);\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    reset,\n  } = useForm({\n    resolver: yupResolver(Schema),\n    defaultValues,\n  });\n  const { contacts } = useContacts();\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    const contactInfo = contacts.find(({ name }) => name === data.name);\n    if (contactInfo) return setContactName(contactInfo.name);\n    dispatch(addContact(data));\n    reset();\n    onModalClose();\n  };\n\n  return (\n    <>\n      <Box component=\"form\" sx={styles.form} onSubmit={handleSubmit(onSubmit)}>\n        {inputsList.map(({ inputName, type, id }) => (\n          <FormField\n            key={id}\n            inputName={inputName}\n            type={type}\n            id={id}\n            register={register}\n            errors={errors}\n          />\n        ))}\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>\n          <Button type=\"submit\" variant=\"contained\">\n            Add Contact\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outlined\"\n            onClick={() => onModalClose()}\n          >\n            Cancel\n          </Button>\n        </Box>\n      </Box>\n      {contactName && (\n        <BasicSnackbar\n          onClose={() => setContactName(null)}\n          severity=\"warning\"\n          variant=\"filled\"\n        >\n          {contactName} is aready in contacts.\n        </BasicSnackbar>\n      )}\n    </>\n  );\n};\n\nAddContactForm.propTypes = {\n  onModalClose: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\nimport { Section } from 'components/Section';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { AddContactButton } from 'components/AddContactButton';\nimport { ModalWindow } from 'components/ModalWindow';\nimport { AddContactForm } from 'components/AddContactForm';\n\nconst ContactsView = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal(!showModal);\n\n  return (\n    <>\n      <Section>\n        <Filter />\n      </Section>\n      <Section>\n        <ContactList />\n        <AddContactButton onOpenModal={toggleModal} />\n      </Section>\n      {showModal && (\n        <ModalWindow onModalClose={toggleModal}>\n          <AddContactForm onModalClose={toggleModal} />\n        </ModalWindow>\n      )}\n    </>\n  );\n};\n\nexport default ContactsView;\n"],"names":["capitalize","string","charAt","toUpperCase","slice","styles","error","color","fontSize","FormField","inputName","type","id","register","errors","useState","showPassword","setShowPassword","FormControl","isError","InputLabel","htmlFor","OutlinedInput","label","required","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","event","preventDefault","edge","Visibility","VisibilityOff","FormHelperText","component","ErrorMessage","name","render","message","Typography","sx","section","paddingTop","paddingBottom","title","textAlign","Section","children","Box","Container","variant","getDefaultValues","arr","reduce","acc","item","wrap","display","bgcolor","padding","borderRadius","top","xs","sm","left","transform","ModalWindow","onModalClose","Modal","open","onClose","nameRegExp","RegExp","SignupSchema","Yup","shape","matches","number","popUpRoot","document","querySelector","BasicSnackbar","severity","createPortal","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","inputsList","nanoid","form","flexDirection","gap","width","margin","btnList","justifyContent","UpdateContactForm","onUpdate","contactName","setContactName","contacts","useContacts","find","useForm","resolver","yupResolver","defaultValues","formState","handleSubmit","reset","dispatch","useDispatch","onSubmit","data","contactInfo","updateContact","map","Button","alignItems","itemContentWrap","ContactItem","memo","contact","showModal","setShowModal","updateSuccess","setUpdatedSuccess","avatar","handleToggleModal","Avatar","alt","src","Tooltip","Edit","deleteContact","Delete","InfoText","list","ContactList","isLoading","filter","useSelector","selectFilter","useEffect","fetchContacts","isOk","showError","empty","length","noMatches","showList","List","Loader","filterId","Filter","onChange","e","setFilter","currentTarget","value","trim","btn","AddContactButton","onOpenModal","PersonAdd","Schema","AddContactForm","addContact","toggleModal"],"sourceRoot":""}